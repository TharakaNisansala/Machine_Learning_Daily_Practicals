
#matrix and their basic operations
x=[1,2,3,4,5]
import numpy as np
x=np.array([1,2,3,4,5])
print(x)
[1 2 3 4 5]
m=np.array([[1,5,2],
          [4,7,4],
          [2,0,9]])

print(m)
[[1 5 2]
 [4 7 4]
 [2 0 9]]
print("Matrix transpose:\n",m.transpose(),'\n')
print("Matrix determinant:",np.linalg.det(m),"\n")
Matrix transpose:
 [[1 4 2]
 [5 7 0]
 [2 4 9]] 

Matrix determinant: -105.00000000000006 

m_inv=np.linalg.inv(m)
print("Matrix inverse:\n",m_inv,"\n")
Matrix inverse:
 [[-0.6         0.42857143 -0.05714286]
 [ 0.26666667 -0.04761905 -0.03809524]
 [ 0.13333333 -0.0952381   0.12380952]] 

iden_m=np.dot(m,m_inv)
iden_m=np.round(np.abs(iden_m),0) #A*(A)^-1=I
print("Product of matrix and its inverse:\n",iden_m)
Product of matrix and its inverse:
 [[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
eigen_vals,eigen_vecs=np.linalg.eig(m)
print("Eigen value:\n",eigen_vals,"\n")
print("Eigen vectorz:\n",eigen_vecs,"\n")
Eigen value:
 [-1.32455532 11.32455532  7.        ] 

Eigen vectorz:
 [[-0.91761521  0.46120352 -0.46829291]
 [ 0.35550789  0.79362022 -0.74926865]
 [ 0.17775394  0.39681011  0.46829291]] 

U,S,VT=np.linalg.svd(m)
print("Getting SVD Outputs:\n")
print("U:\n",U,"\n")
print("S:\n",S,"\n")
print("VT:\n",VT,"\n")
Getting SVD Outputs:

U:
 [[ 0.3831556  -0.39279153  0.83600634]
 [ 0.68811254 -0.48239977 -0.54202545]
 [ 0.61619228  0.78294653  0.0854506 ]] 

S:
 [12.10668383  6.91783499  1.25370079] 

VT:
 [[ 0.36079164  0.55610321  0.74871798]
 [-0.10935467 -0.7720271   0.62611158]
 [-0.92621323  0.30777163  0.21772844]] 

zeros_arr=np.zeros((2,3))
print(zeros_arr)
[[0. 0. 0.]
 [0. 0. 0.]]
ones_arr=np.ones((1,5),dtype=np.int32) #specifying datatype
print(ones_arr)
[[1 1 1 1 1]]
ones_arr=np.ones((3,4))
print(ones_arr)
[[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
 